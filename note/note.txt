* React
- React는 Facebook(Meta)에서 개발한 컴포넌트 기반의 자바스크립트 UI 라이브러리
- 복잡한 UI를 컴포넌트 단위로 쪼개어 개발할 수 있어 유지보수 및 재사용성이 높음
- SPA(Single Page Application)를 구축하는 데 주로 사용됨


* 컴포넌트(Component)
- 리액트의 핵심 단위로, 화면을 구성하는 최소 단위
- 함수형 컴포넌트(Function Component)와 클래스형 컴포넌트(Class Component)로 구분
- 최근에는 Hooks의 등장으로 함수형 컴포넌트 사용이 표준


* JSX (JavaScript XML)
- 자바스크립트 코드 안에 HTML 태그처럼 작성할 수 있는 문법
- JSX는 Babel을 통해 순수 자바스크립트 코드로 변환됨


* 필수 학습 요소

0. 빌드 및 실행
- 개발 서버 실행 : npm start
- 프로덕션 빌드 : npm run build
- 빌드 결과물 실행 (로컬 서버) : npx serve -s build

1. JSX 문법
- 태그는 하나의 부모 요소로 감싸야 함
- 자바스크립트 표현식은 {} 안에 작성
ex) const Hello = () => <h1>Hello, React!</h1>;

2. Props와 State
- props : 컴포넌트의 속성 (= 자바스크립트 객체의 프라퍼티)
          부모 > 자식으로 값을 전달할 때 사용 (읽기 전용)
- state : 컴포넌트 내부에서 값을 관리 (변경 가능, 렌더링에 영향)
          스테이트의 값(value)과 값변경자(setter)로 구성
- prop은 컴포넌트 내부로 외부컴포넌트의 속성값을 가져오기 위해 사용되고
  state는 컴포넌트 내부의 값을 저장하고 값의 변경에 따라서
  UI가 실시간 자동으로 변경되게 하기 위해 사용됨
ex) function Greeting({ name }) {
         return <h1>Hello, {name}</h1>;
    }
- {} : 리액트 표현식(expression)

3. Hooks
- 함수형 컴포넌트에서 상태와 생명주기 관리
- useState, useEffect, useRef, useContext, useReducer, useMemo, useCallback 등
ex) import { useState } from 'react';
    function Counter() {
        const [count, setCount] = useState(0);
        return <button onClick={() => setCount(count + 1)}>{count}</button>;
    }

4. 이벤트 처리
- JSX에서 이벤트 속성명은 camelCase로 작성 (onClick, onChange 등)
- 유사엘리먼트 : JSX내부에 HTML엘리먼트처럼 사용하는 엘리먼트
- 유사엘리먼트 내부에 이벤트속성(onChane, onClick 등등)
  값으로 표현식(콜백함수)를 사용해 이벤트 처리
ex) <button onClick={handleClick}>클릭</button>

5. 컴포넌트 트리와 Props 전달
- 상위 > 하위 컴포넌트로 데이터 전달
- Props drilling : 상위 > 하위컴포넌트로 데이터 전달시 중간의 컴포넌트들도 계속 전달해야 하는 상황
- Props drilling을 피하기 위해 Context API 또는 상태관리 라이브러리 사용

6. 스타일드 컴포넌트 (Styled Component)
- npm install styled-components@5.3.11
- 스타일이 적용된 컴포넌트
- 기존 컴포넌트에 스타일을 적용하기 위해서도 사용
- css속성표기법을 사용할 수도 있고 ``(백틱함수)를 사용하기도 함

7. 컨텍스트 API (Context API)
- 전역상태관리를 위한 API
- useState를 통해서 컴포넌트단위의 상태관리를 한다면
  Context API를 통해서는 하위컴포넌트 전체의 상태관리를 하게됨
- createContext로 컨텍스트를 생성한 후 useContext 훅을 사용

8. Reducer
- reducer는 상태(state)와 명령(action)을 인자로 받아서
  명령에 따른 상태를 반환하는 리액트훅(함수)이다.
- dispatcher는 reducer에게 명령(action)을 전달하는 역할을 하는 함수
- reducer를 통해 컴포넌트의 상태를 컴포넌트와 분리하여 별도로 관리하고
  상태처리를 일원화 할수 있다는 장점이 있다.
- 디자인패턴 중 facade패턴, command패턴을 사용해서
  상태관리를 일원화 및 역할 분리할 수 있다
- 형식 : const [state, dispatcher] = useReducer(reducer, initialState);
- 작동순서 : action(명령) > dispatcher(명령분배기) > reducer > new state > component

9. redux
- 상태관리를 위한 외부라이브러리
- npm install redux
- npm install react-redux
- 명령(action), dispatcher, reducer, store(상태관리를 일원화)
- 상태관리 흐름 : action > dispatcher > reducer > store > UI
- 모든 상태관리를 store를 통해서 하게 됨



